--------------------------------------------
------------ Variables à éditer ------------
-------------------------------------------- 

local debugging = false			            -- true pour voir les logs dans la console log Dz ou false pour ne pas les voir
local script_actif = false                     -- active (true) ou désactive (false) ce script simplement
local device_chaine = "Chaine Livebox"          -- nom du  dummy text affichant la chaine en cours de lecture
local livebox_tv = "Livebox TV"                 -- nom du  dummy interrupteur pour connaitre l'état de la livebox TV, nil si inutilisé
local domoticzURL = "127.0.0.1"
local dom_var_nb_heure_future_prevision = "forecast_io_nb_heure_future_prevision"
--------------------------------------------
----------- Fin variables à éditer ---------
--------------------------------------------
--------------------------------------------
------------- Autres Variables -------------
--------------------------------------------
local nom_script = 'Forecast'
local version = '0.1'
local curl = '/usr/bin/curl -m 5 '
if(package.config:sub(1,1) == '/') then
	luaDir = debug.getinfo(1).source:match("@?(.*/)")
else
	luaDir = string.gsub(debug.info(1).source:match("@?(.*\\)"), '\\', '\\\\')
end
json = assert(loadfile(luaDir..'JSON.lua'))()
--------------------------------------------
----------- Fin Autres Variables -----------
--------------------------------------------	
--------------------------------------------
---------------- Fonctions -----------------
-------------------------------------------- 
function write_in_dom_log (s, debugging)
	if (debugging) then 
		if s ~= nil then
			print ("<font color='#f3031d'>".. s .."</font>")
		else
			print ("<font color='#f3031d'>aucune valeur affichable</font>")
		end
	end
end	
--On demande les prevision pour maintenant + x heures le max de l'api est 48H
function get_nb_heure_future_prevision()
	return tonumber(uservariables[dom_var_nb_heure_future_prevision])	
end
function get_api_forecast_io()
	return 
end
function get_latitude()
	return dom_get_json_config().Latitude 
end
function get_longitude()
	return dom_get_json_config().Longitude 
end
function dom_get_json_config()
	return http_get_json("http://".. domoticzURL .."/json.htm?type=command&param=getconfig")
end
function http_get_json(url)
	local config = assert(io.popen(curl..' "'.. url ..'"'))           
	local blocjson = config:read('*all')
	config:close()
	--write_in_dom_log(url..' --- --- --- '..blocjson,debugging)
	local jsonValeur = json:decode(blocjson)
	return jsonValeur
	--local etat = jsonValeur.result.data.activeStandbyState
end
-------------------------------------------- 
--------------------------------------------
-------------- Fin Fonctions ---------------
--------------------------------------------
commandArray = {}
current_minute=tonumber(os.date("%M"))
if script_actif == true  then -- and current_minute == 0 then --Toutes les heures à la minute 0
write_in_dom_log("=========== ".. nom_script .." (v".. version ..") ===========",debugging)
write_in_dom_log("============ ".. get_nb_heure_future_prevision() .." ==================", debugging)
write_in_dom_log("============ ".. get_latitude() .." ==================", debugging)

--[[

--=========== Lecture json livebox TV ===============--
 
--=========== Vérification état Livebox TV ===============--
    if etat == '1'then 
    --commandArray[#commandArray+1]={['UpdateDevice'] = idx..'|0|'..'Arret' }
    write_in_dom_log('--- --- --- Livebox TV Éteinte',debugging)
        if  otherdevices[livebox_tv] ~= nil  then    
            if ( otherdevices[livebox_tv] == 'On') then
                commandArray[livebox_tv]='Off'
                write_in_dom_log('--- --- --- Mise à l\'arrêt Livebox tv',debugging)
            end
            if ( otherdevices[device_chaine] ~= "Livebox TV Éteinte")  then -- si la livebox TV est éteinte on efface la dernière chaine lue et on affiche l'état Livebox
                commandArray[#commandArray + 1] = { ['UpdateDevice'] = otherdevices_idx[device_chaine]..'|0|Livebox TV Éteinte' }                            
            end
        end
    end
  --
    if etat == '0' then
        write_in_dom_log('--- --- --- Livebox tv en marche',debugging)    
        if  otherdevices[livebox_tv] ~= nil  then 
            if ( otherdevices[livebox_tv] == 'Off') then
                commandArray[livebox_tv]='On'
                write_in_dom_log('--- --- --- Mise en marche Livebox tv',debugging)
            end
        end
        chaine = jsonValeur.result.data.playedMediaId
        if  chaine ~= nil  then 
            write_in_dom_log('--- --- --- Livebox tv en marche chaine (id) '..chaine,debugging)
            for k,v in pairs(les_chaines) do-- On parcourt chaque chaine
                if tonumber(v.id) == tonumber(chaine) then
                    write_in_dom_log('--- --- --- Livebox tv en marche chaine '..v.nom,debugging)
                    if device_chaine ~= nil then
                        if ( otherdevices[device_chaine] ~= v.nom)  then
                        commandArray[#commandArray + 1] = { ['UpdateDevice'] = otherdevices_idx[device_chaine]..'|0|'..v.nom }                        
                        write_in_dom_log('--- --- --- idx du device chaine '..otherdevices_idx[device_chaine],debugging)
                        write_in_dom_log('--- --- --- Mise à jour chaine '..v.nom,debugging)    
                        end
                    end 
                end
            end    
        else
          local osdContext = jsonValeur.result.data.osdContext
          write_in_dom_log('--- --- --- livebox tv sur '..osdContext,debugging)        
        end
    end
-- ====================================================================================================================	

]]--
write_in_dom_log("========= Fin ".. nom_script .." (v".. version ..") =========",debugging)
end -- if script_actif
return commandArray
